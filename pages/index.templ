package pages

import (
	"github.com/JacobSchroder/jup/components/button"
	"github.com/JacobSchroder/jup/components/form"
	"github.com/JacobSchroder/jup/components/input"
	"github.com/JacobSchroder/jup/components/modal"
	"github.com/JacobSchroder/jup/components/textarea"
	"github.com/JacobSchroder/jup/templates"
	"github.com/JacobSchroder/jup/templates/issue"
)

templ CommentForm() {
	<form hx-post="/comment" hx-swap="outerHTML">
		<input class="bg-slate-700" name="comment" type="text"/>
		<button type="submit">Sumbit</button>
	</form>
}

type IndexProps struct {
	Issues []issue.IssueProps
}

templ Index(props IndexProps) {
	@templates.Layout(templates.LayoutProps{Title: "Index"}) {
		<div class="min-h-screen">
			<nav class="w-full flex justify-between items-center bg-secondary p-2">
				<div></div>
				<div>
					@modal.Trigger(modal.TriggerProps{
						For: "default-modal",
					}) {
						@button.Button(button.Props{
							Variant: "default",
							Size:    "lg",
						}) {
							New issue
						}
					}
					@modal.Modal(modal.Props{
						ID:    "default-modal",
						Class: "max-w-md",
					}) {
						// TODO: reset form values on success
						<form hx-post="/issues" hx-swap="beforeend" hx-target="#issues">
							@modal.Header() {
								New issue
							}
							@modal.Body() {
								@form.Item() {
									@form.Label(form.LabelProps{For: "new-issue-title"}) {
										Title
									}
									@input.Input(input.Props{ID: "new-issue-title", Name: "title"}) {
									}
									@form.Label(form.LabelProps{For: "new-issue-description"}) {
										Description
									}
									@textarea.Textarea(textarea.Props{ID: "new-issue-description", Name: "description", Placeholder: "Enter description"})
								}
							}
							@modal.Footer() {
								<div class="flex gap-2">
									@modal.Close(modal.CloseProps{
										For: "default-modal",
									}) {
										@button.Button(button.Props{
											Variant: button.VariantSecondary,
										}) {
											Cancel
										}
									}
									@modal.Close(modal.CloseProps{
										For: "default-modal",
									}) {
										@button.Button(button.Props{Type: button.TypeSubmit}) {
											Continue
										}
									}
								</div>
							}
						</form>
					}
				</div>
			</nav>
			<div class="h-full flex items-center justify-center px-4">
				<div class="w-full max-w-md space-y-2" id="issues">
					for _, issueItem := range props.Issues {
						@issue.Issue(issue.IssueProps{Id: issueItem.Id, Title: issueItem.Title, Description: issueItem.Description})
					}
				</div>
			</div>
		</div>
	}
}
