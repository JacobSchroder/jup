package issue

import (
	"fmt"
	"github.com/JacobSchroder/jup/components/button"
	"github.com/JacobSchroder/jup/components/form"
	"github.com/JacobSchroder/jup/components/input"
	"github.com/JacobSchroder/jup/components/modal"
	"github.com/JacobSchroder/jup/components/textarea"
)

type CreateIssueModalTriggerProps struct {
	Attributes templ.Attributes
}

const CreateIssueModalCloseButtonID = "create-issue-modal-close-btn"
const CreateIssueModalID = "create-issue-modal"
const CreateIssueModalTriggerID = "create-issue-modal-trigger"

templ CreateIssueModalTrigger(props CreateIssueModalTriggerProps) {
	@modal.Trigger(modal.TriggerProps{
		ID:         CreateIssueModalTriggerID,
		For:        CreateIssueModalID,
		Attributes: props.Attributes,
	}) {
		@button.Button(button.Props{
			Variant: "default",
			Size:    "lg",
		}) {
			New issue
		}
	}
}

type CreateIssueFormProps struct {
	Attributes templ.Attributes
}

var afterCreateIssue = fmt.Sprintf("if (event.detail.successful) { this.reset(); document.getElementById('%s').click(); }", CreateIssueModalCloseButtonID)

templ CreateIssueForm(props CreateIssueFormProps) {
	<script>
	 function closeCreateIssueModal() {
		document.getElementById({{ CreateIssueModalCloseButtonID }}).click();
	 }
	</script>
	@modal.Modal(modal.Props{
		ID:         CreateIssueModalID,
		Class:      "max-w-md",
		Attributes: props.Attributes,
	}) {
		// TODO: reset form values on success
		<form
			hx-post="/issues"
			hx-swap="beforeend"
			hx-target="#issues"
			_="on submit log 'submitting'"
			hx-on::after-request="if (event.detail.successful) { this.reset();}"
		>
			@modal.Header() {
				New issue
			}
			@modal.Body() {
				@form.Item() {
					@form.Label(form.LabelProps{For: "new-issue-title"}) {
						Title
					}
					@input.Input(input.Props{ID: "new-issue-title", Name: "title"}) {
					}
					@form.Label(form.LabelProps{For: "new-issue-description"}) {
						Description
					}
					@textarea.Textarea(textarea.Props{ID: "new-issue-description", Name: "description", Placeholder: "Enter description"})
				}
			}
			@modal.Footer() {
				<div class="flex gap-2">
					@modal.Close(modal.CloseProps{
						For: CreateIssueModalID,
						ID:  CreateIssueModalCloseButtonID,
					}) {
						@button.Button(button.Props{
							Variant: button.VariantSecondary,
						}) {
							Cancel
						}
					}
					@button.Button(button.Props{Type: button.TypeSubmit}) {
						Create
					}
				</div>
			}
		</form>
	}
}
