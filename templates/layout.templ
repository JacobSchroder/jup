package templates

import (
	"github.com/JacobSchroder/jup/components/avatar"
	"github.com/JacobSchroder/jup/components/calendar"
	"github.com/JacobSchroder/jup/components/carousel"
	"github.com/JacobSchroder/jup/components/chart"
	"github.com/JacobSchroder/jup/components/code"
	"github.com/JacobSchroder/jup/components/datepicker"
	"github.com/JacobSchroder/jup/components/drawer"
	"github.com/JacobSchroder/jup/components/dropdown"
	"github.com/JacobSchroder/jup/components/input"
	"github.com/JacobSchroder/jup/components/inputotp"
	"github.com/JacobSchroder/jup/components/label"
	"github.com/JacobSchroder/jup/components/modal"
	"github.com/JacobSchroder/jup/components/popover"
	"github.com/JacobSchroder/jup/components/progress"
	"github.com/JacobSchroder/jup/components/rating"
	"github.com/JacobSchroder/jup/components/selectbox"
	"github.com/JacobSchroder/jup/components/slider"
	"github.com/JacobSchroder/jup/components/tabs"
	"github.com/JacobSchroder/jup/components/tagsinput"
	"github.com/JacobSchroder/jup/components/textarea"
	"github.com/JacobSchroder/jup/components/toast"
	"github.com/JacobSchroder/jup/utils"
)

templ header(title string) {
	<head>
		<title>{ title }</title>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/htmx-ext-ws@2.0.2"></script>
		@avatar.Script()
		@calendar.Script()
		@carousel.Script()
		@chart.Script()
		@code.Script()
		@datepicker.Script()
		@drawer.Script()
		@dropdown.Script()
		@input.Script()
		@inputotp.Script()
		@label.Script()
		@modal.Script()
		@popover.Script()
		@progress.Script()
		@rating.Script()
		@selectbox.Script()
		@slider.Script()
		@tabs.Script()
		@tagsinput.Script()
		@textarea.Script()
		@toast.Script()
		<link rel="stylesheet" href="/assets/css/out/style.css"/>
		// if os.Getenv("env") == "production" {
		// 	<link rel="stylesheet" href="/assets/css/style.min.css" nonce={ middleware.GetTwNonce(ctx) }/>
		// } else {
		// 	<link rel="stylesheet" href="/assets/css/style.css" nonce={ middleware.GetTwNonce(ctx) }/>
		// }
	</head>
}

templ end() {
	<script>
      // Re-initialize templUI components after HTMX swaps
      document.body.addEventListener("htmx:afterSwap", (e) => {
        if (window.templUI) {
          Object.values(window.templUI).forEach(comp => {
            comp.init?.(e.detail.elt);
          });
        }
      });

      // Re-initialize components after out-of-band swaps
      document.body.addEventListener("htmx:oobAfterSwap", (e) => {
        if (window.templUI) {
          Object.values(window.templUI).forEach(comp => {
            comp.init?.(e.detail.target);
          });
        }
      });

      // Cleanup before swap (for components with event listeners)
      document.body.addEventListener("htmx:beforeSwap", (e) => {
        if (window.templUI) {
          Object.values(window.templUI).forEach(comp => {
            comp.cleanup?.(e.detail.target);
          });
        }
      });
    </script>
}

templ nav() {
	<nav class="bg-slate-800 p-4">
		<div class="container flex justify-between">
			<ol class="flex space-x-4">
				<li>
					<a class="text-gray-200" href="/">Home</a>
				</li>
				<li>
					<a class="text-gray-200" href="#">About</a>
				</li>
			</ol>
			<div class="flex space-x-4">
				<a class="text-gray-200 hover:text-white" href="/login">Login</a>
			</div>
		</div>
	</nav>
}

type LayoutProps struct {
	Title string
	Class string
}

templ Layout(props LayoutProps) {
	@header(props.Title)
	<body hx-ext="ws" class={ utils.TwMerge("flex flex-col h-full bg-slate-200 dark:bg-slate-950 text-black dark:text-white", props.Class) }>
		{ children... }
		@end()
	</body>
}
