package websocket_test

templ WebSocketTest() {
	<!DOCTYPE html>
	<html>
		<head>
			<title>WebSocket Test</title>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		</head>
		<body>
			<div id="app" style="padding: 20px; font-family: Arial, sans-serif;">
				<h1>WebSocket Real-Time Test</h1>
				<div style="margin-bottom: 20px;">
					<h3>Connection Status: <span id="connection-status">Disconnected</span></h3>
				</div>
				<div style="margin-bottom: 20px;">
					<input type="text" id="message-input" placeholder="Enter a message..." style="width: 300px; padding: 10px;"/>
					<button id="send-btn" style="padding: 10px 20px; margin-left: 10px;">Send Message</button>
				</div>
				<div>
					<h3>Messages:</h3>
					<div id="messages" style="border: 1px solid #ccc; height: 300px; overflow-y: auto; padding: 10px; background-color: #f5f5f5;"></div>
				</div>
			</div>
			<script>
				let ws = null;
				let reconnectInterval = null;

				function connect() {
					const protocol = location.protocol === 'https:' ? 'wss:' : 'ws:';
					const wsUrl = `${protocol}//${location.host}/ws`;

					ws = new WebSocket(wsUrl);

					ws.onopen = function(event) {
						console.log('Connected to WebSocket');
						document.getElementById('connection-status').textContent = 'Connected';
						document.getElementById('connection-status').style.color = 'green';
						addMessage('System', 'Connected to WebSocket server', 'success');

						// Clear any reconnection attempts
						if (reconnectInterval) {
							clearInterval(reconnectInterval);
							reconnectInterval = null;
						}
					};

					ws.onmessage = function(event) {
						console.log('Message received:', event.data);

						try {
							const messageData = JSON.parse(event.data);
							if (messageData.type === 'notification' && messageData.data) {
								const notification = messageData.data;
								addMessage(notification.title || 'Notification', notification.message, notification.level || 'info');
							} else {
								addMessage('Server', event.data, 'info');
							}
						} catch (e) {
							// If not JSON, treat as plain text
							addMessage('Server', event.data, 'info');
						}
					};

					ws.onclose = function(event) {
						console.log('WebSocket connection closed');
						document.getElementById('connection-status').textContent = 'Disconnected';
						document.getElementById('connection-status').style.color = 'red';
						addMessage('System', 'Connection lost. Attempting to reconnect...', 'warning');

						// Attempt to reconnect every 3 seconds
						if (!reconnectInterval) {
							reconnectInterval = setInterval(function() {
								if (ws.readyState === WebSocket.CLOSED) {
									connect();
								}
							}, 3000);
						}
					};

					ws.onerror = function(error) {
						console.error('WebSocket error:', error);
						addMessage('System', 'WebSocket error occurred', 'error');
					};
				}

				function sendMessage() {
					const input = document.getElementById('message-input');
					const message = input.value.trim();

					if (message && ws && ws.readyState === WebSocket.OPEN) {
						ws.send(message);
						addMessage('You', message, 'info');
						input.value = '';
					}
				}

				function addMessage(sender, message, level) {
					const messagesDiv = document.getElementById('messages');
					const messageDiv = document.createElement('div');
					const timestamp = new Date().toLocaleTimeString();

					let color = '#333';
					switch(level) {
						case 'success': color = '#28a745'; break;
						case 'warning': color = '#ffc107'; break;
						case 'error': color = '#dc3545'; break;
						case 'info': color = '#17a2b8'; break;
					}

					messageDiv.innerHTML = `
						<div style="margin-bottom: 10px; padding: 8px; border-left: 3px solid ${color}; background-color: white;">
							<strong>[${timestamp}] ${sender}:</strong> ${message}
						</div>
					`;

					messagesDiv.appendChild(messageDiv);
					messagesDiv.scrollTop = messagesDiv.scrollHeight;
				}

				// Event listeners
				document.getElementById('send-btn').addEventListener('click', sendMessage);
				document.getElementById('message-input').addEventListener('keypress', function(e) {
					if (e.key === 'Enter') {
						sendMessage();
					}
				});

				// Connect on page load
				connect();
			</script>
		</body>
	</html>
}
